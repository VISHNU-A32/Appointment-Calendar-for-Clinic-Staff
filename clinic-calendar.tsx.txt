import React, { useState, useEffect } from 'react';
import { Calendar, Clock, User, Plus, X, ChevronLeft, ChevronRight, Edit2, Trash2 } from 'lucide-react';

// TODO: move this to a separate file later
const mockPatients = [
  'John Smith', 'Sarah Johnson', 'Mike Davis', 'Emily Brown', 'David Wilson',
  'Lisa Garcia', 'Robert Taylor', 'Jennifer Martinez', 'William Anderson', 'Jessica Thomas'
];

const mockDoctors = [
  'Dr. Anderson', 'Dr. Smith', 'Dr. Johnson', 'Dr. Brown', 'Dr. Davis'
];

export default function AppointmentCalendar() {
  const [loggedIn, setLoggedIn] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [appointments, setAppointments] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedDay, setSelectedDay] = useState(null);
  const [formData, setFormData] = useState({
    patient: '',
    doctor: '',
    time: ''
  });
  const [editingId, setEditingId] = useState(null);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  // handle window resize - probably overkill but whatever
  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const isMobile = windowWidth < 768;

  const handleLogin = () => {
    // simple validation
    if (email === 'staff@clinic.com' && password === '123456') {
      setLoggedIn(true);
      setError('');
    } else {
      setError('Invalid credentials!');
    }
  };

  const getDaysInCurrentMonth = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startingDay = firstDay.getDay();
    const daysInMonth = lastDay.getDate();
    
    const calendarDays = [];
    
    // empty cells for offset
    for (let i = 0; i < startingDay; i++) {
      calendarDays.push(null);
    }
    
    // actual days
    for (let day = 1; day <= daysInMonth; day++) {
      calendarDays.push(new Date(year, month, day));
    }
    
    return calendarDays;
  };

  const getDateString = (date) => {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  };

  const getAppointmentsForDay = (date) => {
    const dateStr = getDateString(date);
    return appointments.filter(apt => apt.date === dateStr);
  };

  const openModal = (date) => {
    setSelectedDay(date);
    setFormData({ patient: '', doctor: '', time: '' });
    setEditingId(null);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedDay(null);
    setFormData({ patient: '', doctor: '', time: '' });
    setEditingId(null);
  };

  const saveAppointment = () => {
    if (!formData.patient || !formData.doctor || !formData.time) {
      alert('Please fill all fields'); // yeah i know, should be better UX
      return;
    }

    const appointmentData = {
      ...formData,
      date: getDateString(selectedDay),
      id: editingId || Date.now().toString() // lazy ID generation
    };

    if (editingId) {
      // update existing
      setAppointments(prev => prev.map(apt => 
        apt.id === editingId ? appointmentData : apt
      ));
    } else {
      // add new
      setAppointments(prev => [...prev, appointmentData]);
    }
    
    closeModal();
  };

  const editAppointment = (appointment) => {
    setFormData({
      patient: appointment.patient,
      doctor: appointment.doctor,
      time: appointment.time
    });
    setEditingId(appointment.id);
    setSelectedDay(new Date(appointment.date));
    setShowModal(true);
  };

  const deleteAppointment = (id) => {
    if (window.confirm('Are you sure?')) { // basic confirmation
      setAppointments(prev => prev.filter(apt => apt.id !== id));
    }
  };

  const formatTime = (timeStr) => {
    const [hours, minutes] = timeStr.split(':');
    const h = parseInt(hours);
    const period = h >= 12 ? 'PM' : 'AM';
    const displayHour = h % 12 || 12;
    return `${displayHour}:${minutes} ${period}`;
  };

  const goToPrevMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));
  };

  const goToNextMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));
  };

  // login screen
  if (!loggedIn) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md w-96">
          <div className="text-center mb-6">
            <Calendar className="mx-auto h-10 w-10 text-blue-500 mb-2" />
            <h2 className="text-2xl font-bold text-gray-800">Clinic Calendar</h2>
            <p className="text-gray-600">Staff Login</p>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="staff@clinic.com"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="123456"
              />
            </div>
            
            {error && (
              <div className="text-red-600 text-sm">{error}</div>
            )}
            
            <button
              onClick={handleLogin}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Login
            </button>
          </div>
          
          <div className="mt-6 text-center text-sm text-gray-500">
            <p>Demo: staff@clinic.com / 123456</p>
          </div>
        </div>
      </div>
    );
  }

  const days = getDaysInCurrentMonth();
  const monthName = currentMonth.toLocaleString('default', { month: 'long', year: 'numeric' });

  return (
    <div className="min-h-screen bg-gray-50">
      {/* header */}
      <div className="bg-white shadow">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Calendar className="h-8 w-8 text-blue-600" />
              <h1 className="text-xl font-semibold text-gray-900">Appointment Calendar</h1>
            </div>
            
            {/* month navigation */}
            <div className="flex items-center space-x-4">
              <button
                onClick={goToPrevMonth}
                className="p-2 rounded-md hover:bg-gray-100"
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              
              <h2 className="text-lg font-medium text-gray-900 min-w-[200px] text-center">
                {monthName}
              </h2>
              
              <button
                onClick={goToNextMonth}
                className="p-2 rounded-md hover:bg-gray-100"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-6">
        {isMobile ? (
          // mobile version - daily view
          <div className="space-y-4">
            <div className="bg-white rounded-lg shadow p-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Jump to date:</label>
              <input
                type="date"
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
                onChange={(e) => setSelectedDay(new Date(e.target.value))}
              />
            </div>
            
            {/* render each day */}
            {days.filter(day => day !== null).map(day => {
              const dayAppointments = getAppointmentsForDay(day);
              const isToday = day.toDateString() === new Date().toDateString();
              
              return (
                <div key={day.getDate()} className="bg-white rounded-lg shadow">
                  <div className="p-4 border-b border-gray-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className={`font-medium ${isToday ? 'text-blue-600' : 'text-gray-900'}`}>
                          {day.toLocaleDateString('en-US', { 
                            weekday: 'long', 
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </h3>
                        {isToday && <span className="text-xs text-blue-600">Today</span>}
                      </div>
                      <button
                        onClick={() => openModal(day)}
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded-full"
                      >
                        <Plus className="h-5 w-5" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    {dayAppointments.length === 0 ? (
                      <p className="text-gray-500 text-sm">No appointments scheduled</p>
                    ) : (
                      <div className="space-y-3">
                        {dayAppointments.map(apt => (
                          <div key={apt.id} className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                            <div className="flex-1">
                              <div className="font-medium text-gray-900">{apt.patient}</div>
                              <div className="text-sm text-gray-600">{apt.doctor}</div>
                              <div className="text-sm text-blue-600 font-medium">{formatTime(apt.time)}</div>
                            </div>
                            <div className="flex space-x-2">
                              <button
                                onClick={() => editAppointment(apt)}
                                className="p-1 text-blue-600 hover:bg-blue-100 rounded"
                              >
                                <Edit2 className="h-4 w-4" />
                              </button>
                              <button
                                onClick={() => deleteAppointment(apt.id)}
                                className="p-1 text-red-600 hover:bg-red-100 rounded"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          // desktop version - month grid
          <div className="bg-white rounded-lg shadow overflow-hidden">
            {/* weekday headers */}
            <div className="grid grid-cols-7 gap-px bg-gray-200">
              {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => (
                <div key={day} className="bg-gray-50 p-4 text-center text-sm font-medium text-gray-700">
                  {day}
                </div>
              ))}
            </div>
            
            {/* calendar grid */}
            <div className="grid grid-cols-7 gap-px bg-gray-200">
              {days.map((day, index) => {
                if (!day) {
                  return <div key={index} className="bg-white h-24"></div>;
                }
                
                const dayAppointments = getAppointmentsForDay(day);
                const isToday = day.toDateString() === new Date().toDateString();
                
                return (
                  <div
                    key={day.getDate()}
                    className="bg-white h-24 p-1 cursor-pointer hover:bg-gray-50 border-r border-b border-gray-100"
                    onClick={() => openModal(day)}
                  >
                    <div className={`text-sm font-medium mb-1 ${isToday ? 'text-blue-600' : 'text-gray-900'}`}>
                      {day.getDate()}
                    </div>
                    
                    <div className="space-y-1">
                      {dayAppointments.slice(0, 2).map(apt => (
                        <div
                          key={apt.id}
                          className="text-xs bg-blue-100 text-blue-800 px-1 py-0.5 rounded truncate"
                        >
                          {formatTime(apt.time)} - {apt.patient}
                        </div>
                      ))}
                      {dayAppointments.length > 2 && (
                        <div className="text-xs text-gray-500">
                          +{dayAppointments.length - 2} more
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>

      {/* appointment modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                {editingId ? 'Edit Appointment' : 'New Appointment'}
              </h3>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            {selectedDay && (
              <div className="mb-4 text-sm text-gray-600">
                {selectedDay.toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </div>
            )}
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Patient
                </label>
                <select
                  value={formData.patient}
                  onChange={(e) => setFormData({...formData, patient: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select patient...</option>
                  {mockPatients.map(patient => (
                    <option key={patient} value={patient}>{patient}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Doctor
                </label>
                <select
                  value={formData.doctor}
                  onChange={(e) => setFormData({...formData, doctor: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select doctor...</option>
                  {mockDoctors.map(doctor => (
                    <option key={doctor} value={doctor}>{doctor}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Time
                </label>
                <input
                  type="time"
                  value={formData.time}
                  onChange={(e) => setFormData({...formData, time: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={closeModal}
                className="flex-1 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={saveAppointment}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                {editingId ? 'Update' : 'Save'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}